﻿@using DomainLayer.Models.ViewModels;
@model AnalyticsViewModel

<link rel="stylesheet" href="~/css/analytics.css" asp-append-version="true" />

<section id="content">
    <!-- MAIN STARTS-->
    <main>
        <div class="head-title">
            <div class="left">

                <h1>Analytics</h1>
                <h3>Filters:</h3>
                <button id="toggleFiltersButton" onclick="toggleFilters()">
                    Show Filters <i class="bx bx-filter-alt"></i>
                </button>
                <form method="post" action="/Analytics/actionResult">
                    <div class="filter-box" id="filtersContainer">
                        <div class="input-wrapper">
                            <label for="startdate">Start Date</label>
                            <input type="date" id="startdate" class="filter" asp-for="start">
                        </div>
                        <div class="input-wrapper">
                            <label for="enddate">End Date</label>
                            <input type="date" id="enddate" class="filter" asp-for="end">
                        </div>

                        <div class="input-wrapper">
                            <label for="species-dropdown">Species</label>
                            <div class="dropdown">
                                <button id="dropdownButton" type="button" class="dropbtn">Select Species</button>
                                <div id="species-dropdown" class="dropdown-content">
                                    <label>@Html.CheckBoxFor(model => model.HogBool) Hog</label>
                                    <label>@Html.CheckBoxFor(model => model.CattleBool) Cattle</label>
                                    <label>@Html.CheckBoxFor(model => model.SwineBool) Swine</label>
                                    <label>@Html.CheckBoxFor(model => model.CarabaoBool) Carabao</label>
                                    <label>@Html.CheckBoxFor(model => model.GoatBool) Goat</label>
                                    <label>@Html.CheckBoxFor(model => model.ChickenBool) Chicken</label>
                                    <label>@Html.CheckBoxFor(model => model.DuckBool) Duck</label>
                                    <label>@Html.CheckBoxFor(model => model.SheepBool) Sheep</label>
                                </div>
                            </div>
                        </div>
                        @* <div class="input-wrapper">
                            <label>Species</label>
                            <div class="filter meatEstablishment">
                                <div>
                                    @Html.CheckBoxFor(model => model.CattleBool, new { id = "cattle", @class = "checkbox" })
                                    <label for="cattle">Cattle</label><br>
                                </div>

                                <div>
                                    @Html.CheckBoxFor(model => model.CarabaoBool, new { id = "carabao", @class = "checkbox" })
                                    <label for="carabao">Carabao</label><br>
                                </div>

                                <div>
                                    @Html.CheckBoxFor(model => model.SwineBool, new { id = "swine", @class = "checkbox" })
                                    <label for="swine">Swine</label><br>
                                </div>

                                <div>
                                    @Html.CheckBoxFor(model => model.GoatBool, new { id = "goat", @class = "checkbox" })
                                    <label for="goat">Goat</label><br>
                                </div>

                                <div>
                                    @Html.CheckBoxFor(model => model.ChickenBool, new { id = "chicken", @class = "checkbox" })
                                    <label for="chicken">Chicken</label><br>
                                </div>

                                <div>
                                    @Html.CheckBoxFor(model => model.DuckBool, new { id = "duck", @class = "checkbox" })
                                    <label for="duck">Duck</label><br>
                                </div>

                                <div>
                                    @Html.CheckBoxFor(model => model.SheepBool, new { id = "sheep", @class = "checkbox" })
                                    <label for="sheep">Sheep</label><br>
                                </div>

                                <div>
                                    @Html.CheckBoxFor(model => model.HorseBool, new { id = "horse", @class = "checkbox" })
                                    <label for="hog">Hog</label><br>
                                </div>
                            </div>
                        </div> *@


                        <div class="input-wrapper">
                            @Html.LabelFor(model => model.timeSeries, "Time Frame")
                            @Html.DropDownListFor(model => model.timeSeries, new List<SelectListItem>
                            {
                            new SelectListItem { Text = "Daily", Value = "Daily" },
                            new SelectListItem { Text = "Monthly", Value = "Monthly" },
                            new SelectListItem { Text = "Yearly", Value = "Yearly" }
                            }, new { @class = "filter", id = "timeFrame" })
                        </div>
                        @*<div class="input-wrapper">
                        <label for="meatEstablishment">Meat Establishment</label>
                        <select id="meatEstablishment" class="filter meatEstablishment">
                        <option value="">All</option>
                        <option value="">Contora Halal SLH</option>
                        <option value="">Davao City Slaughterhouse/ BLMC</option>
                        <option value="">Digos City Slaughterhouse</option>
                        <option value="">JK Mercado & Sons Agri. Ent., Inc.</option>
                        <option value="">Luchay SH</option>
                        <option value="">Malagos SLH</option>
                        <option value="">Malalag Municipal SLH</option>
                        <option value="">Mati City Slaughterhouse</option>
                        <option value="">Nabunturan Public Slaughterhouse</option>
                        <option value="">Sto. Tomas Municipal Slaughterhouse</option>
                        </select>
                        </div>*@
                        <div class="input-wrapper">
                            <button class="btn btn-primary py-2 px-4" style="align-items: center; margin-top: 30px;" type="submit">Filter</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>




        <div class="charts">
            <div class="supply-chart charts-card">
                <div class="head">
                    <h3>Meat Quantity Produced</h3>
                </div>
                <div id="area-chart"></div>
            </div>
        </div>

        <div class="charts">
            <div class=" antemortem-chart charts-card">
                <div class="head">
                    <h3>Receiving / Acceptance Reports</h3>
                </div>
                <div id="receiving-bar-chart"></div>
            </div>

            <div class="antemortem-chart charts-card">
                <div class="head">
                    <h3>Antemortem Inspection Reports</h3>
                </div>
                <div id="antemortem-bar-chart"></div>
                @*				<a href="#" id="anteHeads" class="btn btn-primary btn-lg active pt-1 px-2" style="font-size: 12px;" role="button" aria-pressed="true" onclick="updateTooltip('Heads')">By # of Heads</a>
                <a href="#" id="anteWeight" class="btn btn-success btn-lg active pt-1 px-2" style="font-size: 12px;" role="button" aria-pressed="true" onclick="updateTooltip('Kilograms')">By Weight(in Kg.)</a>*@

            </div>
        </div>



        <div class="charts">
            <div class="supply-chart charts-card" style="align-items: center;">
                <div class="head">
                    <h3>Postmortem Inspection Report</h3>
                </div>
                <div id="postmortem-chart"></div>
            </div>
            <div class="supply-chart charts-card unique-chart">
                <div class="head">
                    <h3>Total Fit for Human Consumption</h3>
                </div>
                <div id="fit-chart"></div>

            </div>
        </div>



    </main>
    <!-- MAIN ENDS -->

</section>


@*<script src="https://cdnjs.cloudflare.com/ajax/libs/apexcharts/3.40.0/apexcharts.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>*@
<script>
    //filters
    window.onload = function () {
        var filtersContainer = document.getElementById("filtersContainer");
        filtersContainer.style.display = "none"; // Start with filters hidden
    };

    function toggleFilters() {
        var filtersContainer = document.getElementById("filtersContainer");
        var toggleFiltersButton = document.getElementById("toggleFiltersButton");
        var filterIcon = toggleFiltersButton.querySelector("i.bx-filter-alt");

        if (filtersContainer.style.display === "none") {
            filtersContainer.style.display = "flex";
            filterIcon.style.display = "inline";
            toggleFiltersButton.innerHTML = "Hide Filters <i class='bx bx-filter-alt'></i>";
        } else {
            filtersContainer.style.display = "none";
            filterIcon.style.display = "inline";
            toggleFiltersButton.innerHTML = "Show Filters <i class='bx bx-filter-alt'></i>";
        }
    }

    //Calendar Restrictions
    document.addEventListener("DOMContentLoaded", function () {
        const startDateInput = document.getElementById("startdate");
        const endDateInput = document.getElementById("enddate");

        // Get the current date
        const currentDate = new Date();
        const currentDateString = currentDate.toISOString().split("T")[0];

        // Set the maximum date for the inputs as the current date
        startDateInput.max = currentDateString;
        endDateInput.max = currentDateString;

        startDateInput.addEventListener("change", updateEndDateRestriction);
        endDateInput.addEventListener("change", updateStartDateRestriction);

        function updateEndDateRestriction() {
            const startDate = new Date(startDateInput.value);
            const endDate = new Date(endDateInput.value);

            // Check if the selected start date is later than the current date
            if (startDate > currentDate) {
                startDateInput.value = currentDateString;
            }

            // Set the minimum date for the end date input
            endDateInput.min = startDateInput.value;

            // Check if the selected end date is later than the current date
            if (endDate > currentDate) {
                endDateInput.value = currentDateString;
            }

            // Check if the selected start date is later than the selected end date
            if (startDate > endDate) {
                endDateInput.value = startDateInput.value;
            }
        }

        function updateStartDateRestriction() {
            const startDate = new Date(startDateInput.value);
            const endDate = new Date(endDateInput.value);

            // Check if the selected end date is later than the current date
            if (endDate > currentDate) {
                endDateInput.value = currentDateString;
            }

            // Set the maximum date for the start date input
            startDateInput.max = endDateInput.value;

            // Check if the selected start date is later than the selected end date
            if (startDate > endDate) {
                startDateInput.value = endDateInput.value;
            }
        }
    });


    //Multiselect-Checkbox
    const dropBtn = document.getElementById("dropdownButton"),
        dropdownContent = document.getElementById("species-dropdown");

    dropBtn.addEventListener("click", () => {
        dropdownContent.classList.toggle("show");
    });

    const items = document.querySelectorAll('#species-dropdown input[type="checkbox"]');

    items.forEach(item => {
        item.addEventListener("click", (event) => {
            event.stopPropagation();
            updateButtonLabel();
        });
    });

    function updateButtonLabel() {
        let checkedItems = document.querySelectorAll('#species-dropdown input[type="checkbox"]:checked'),
            btnText = dropBtn;

        if (checkedItems.length > 0) {
            btnText.innerText = `${checkedItems.length} Selected`;
        } else {
            btnText.innerText = "Select Species";
        }
    }

    window.addEventListener('click', (event) => {
        if (!dropBtn.contains(event.target) && !dropdownContent.contains(event.target)) {
            dropdownContent.classList.remove('show');
        }
    });



    let computedStyle = getComputedStyle(document.documentElement);
    let labelColorDark = computedStyle.getPropertyValue('--dark').trim();
    let labelColorLight = computedStyle.getPropertyValue('--light').trim();

    //Meat Qty Area chart JS with darkmode
    let areaChart;
    let labelColor = localStorage.getItem('labelColor') || labelColorDark;

    renderChart(labelColor, labelColor);

    switchMode.addEventListener('change', function () {
        if (areaChart) {
            areaChart.destroy();
        }

        if (this.checked) {
            document.body.classList.add('dark');
            labelColor = labelColorLight;
            localStorage.setItem('labelColor', labelColorLight);
            renderChart(labelColor, "#f5f7ff");
        } else {
            document.body.classList.remove('dark');
            labelColor = labelColorDark;
            localStorage.setItem('labelColor', labelColorDark);
            renderChart(labelColor, labelColorDark);
        }
    });



    //Area Chart


    function renderChart(labelColor, titleColor) {

        const dbData = @Html.Raw(Json.Serialize(Model.analyObjs));

        // Convert to format expected by ApexCharts
        const condemnedData = dbData.map(item => {
            const date = new Date(item.datetime);
            const timestamp = date.getTime();
            return [timestamp, item.condemnedValue];
        });

        const approvedData = dbData.map(item => {
            const date = new Date(item.datetime);
            const timestamp = date.getTime();
            return [timestamp, item.approvedValue];
        });




        let areaChartOptions = {
            series: [{
                name: "Condemned Meat",
                data: condemnedData,
            },
            {
                name: "Approved Meat",
                data: approvedData,
            }],
            chart: {
                type: "area",
                background: "transparent",
                height: 550,
                // width: 1500,
                stacked: false,
                zoom: {
                    autoScaleYaxis: true
                },
                toolbar: {
                    show: true,
                    offsetX: 0,
                    offsetY: -30,
                    tools: {
                        download: true,
                        selection: true,
                        zoom: true,
                        zoomin: true,
                        zoomout: true,
                        pan: true,
                        reset: true | '<img src="/static/icons/reset.png" width="20">',
                        customIcons: []
                    },
                    export: {
                        csv: {
                            filename: 'Approved Vs. Condemned Meat Analytics',
                            columnDelimiter: ',',
                            headerCategory: 'Date',
                            headerValue: 'value',
                            dateFormatter(timestamp) {
                                return new Date(timestamp).toDateString()
                            }
                        },
                        svg: {
                            filename: 'Approved Vs. Condemned Meat Analytics',
                        },
                        png: {
                            filename: 'Approved Vs. Condemned Meat Analytics',
                        }
                    },
                    autoSelected: 'zoom'
                },
            },
            colors: ["#d50000", "#00ab57"],





            xaxis: {
                // categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],
                type: 'datetime',
                min: new Date('@Model.start').getTime(),
                tickAmount: 6,
                labels: {
                    style: {
                        colors: labelColor,
                    },
                },
            },
            dataLabels: {
                enabled: false,
            },
            fill: {
                gradient: {
                    opacityFrom: 0.4,
                    opacityTo: 0.1,
                    shadeIntensity: 1,
                    stops: [0, 100],
                    type: "vertical",
                },
                type: "gradient",
            },
            grid: {
                borderColor: "#55596e",
                yaxis: {
                    lines: {
                        show: true,
                    },
                },
                xaxis: {
                    lines: {
                        show: false,
                    },
                },
            },
            legend: {
                labels: {
                    colors: labelColor,
                },
                show: true,
                position: "bottom",
            },
            stroke: {
                curve: "smooth",
            },
            yaxis: [
                {
                    opposite: true,
                    title: {
                        text: "Condemned Meat",
                        style: {
                            color: titleColor,
                        },
                    },
                    labels: {
                        style: {
                            colors: [labelColor],
                        },
                    },
                },
                {
                    title: {
                        text: "Approved Meat",
                        style: {
                            color: titleColor,
                        },
                    },
                    labels: {
                        style: {
                            colors: [labelColor],
                        },
                    },
                },

            ],
            tooltip: {
                shared: true,
                intersect: false,
                theme: "dark",
                x: {
                    format: 'dd MMM yyyy'
                },
            }
        };

        areaChart = new ApexCharts(document.querySelector("#area-chart"), areaChartOptions);
        areaChart.render();


    }





    // Receiving BAR CHART with darkmode
    let ReceivingbarChart;



    let receivingTimestamp = @Html.Raw(Json.Serialize(Model.dayMonthYearAbbreviationsArray));
    let dataHeads = [@string.Join(",", Model.monthlyRangeOfHead)];
    let dataWeight = [@string.Join(",", Model.monthlyRangeOfLiveWeight)];
    let usedTimestamp = receivingTimestamp.slice(0, dataHeads.length);

    if (currentMode === 'dark') {
        document.body.classList.add('dark');
        switchMode.checked = true;
        renderReceivingbarChart(labelColorLight, 'dark');
    } else {
        document.body.classList.remove('dark');
        switchMode.checked = false;
        renderReceivingbarChart(labelColorDark, 'light');
    }

    switchMode.addEventListener('change', function () {
        if (ReceivingbarChart) {
            ReceivingbarChart.destroy();
        }

        if (this.checked) {
            document.body.classList.add('dark');
            localStorage.setItem('mode', 'dark'); // Save mode to localStorage
            renderReceivingbarChart(labelColorLight, 'dark');
        } else {
            document.body.classList.remove('dark');
            localStorage.setItem('mode', 'light'); // Save mode to localStorage
            renderReceivingbarChart(labelColorDark, 'light');
        }
    });

    function renderReceivingbarChart(labelColor, tooltipTheme) {
        let barChartOptions = {
            series: [
                {
                    name: '# of Heads',
                    data: dataHeads
                },
                {
                    name: 'LiveWeight',
                    data: dataWeight
                },
            ],
            chart: {
                type: 'bar',
                height: 500,
                toolbar: {
                    show: true,
                    offsetX: 0,
                    offsetY: -30,
                    tools: {
                        download: true,
                        selection: true,
                        zoom: true,
                        zoomin: true,
                        zoomout: true,
                        pan: true,
                        reset: true | '<img src="/static/icons/reset.png" width="20">',
                        customIcons: []
                    },
                    export: {
                        csv: {
                            filename: 'Receiving Analytics',
                            columnDelimiter: ',',
                            headerCategory: 'Date',
                            headerValue: 'value',
                            dateFormatter(timestamp) {
                                return new Date(timestamp).toDateString()
                            }
                        },
                        svg: {
                            filename: 'Receiving Analytics',
                        },
                        png: {
                            filename: 'Receiving Analytics',
                        }
                    },
                    autoSelected: 'zoom'
                },
            },
            colors: [
                '#2962ff',
                '#d50000',
                '#2e7d32',
            ],
            plotOptions: {
                bar: {
                    horizontal: true,
                    columnWidth: '55%',
                    endingShape: 'rounded',
                },
            },
            dataLabels: {
                enabled: false
            },
            stroke: {
                show: true,
                width: 2,
                colors: ['transparent']
            },
            xaxis: {
                categories: usedTimestamp,
                title: {
                    text: 'Receiving Quantity',
                    style: {
                        color: labelColor,
                    },
                },
                labels: {
                    style: {
                        colors: labelColor,
                    },
                },
            },
            yaxis: {
                title: {
                    text: 'Time',
                    style: {
                        color: labelColor,
                    },
                },
                labels: {
                    style: {
                        colors: labelColor,
                    },
                },
            },
            fill: {
                opacity: 1
            },
            grid: {
                borderColor: "#55596e",
                yaxis: {
                    lines: {
                        show: true,
                    },
                },
                xaxis: {
                    lines: {
                        show: true,
                    },
                },
            },
            legend: {
                labels: {
                    colors: labelColor,
                },
                show: true,
                position: "bottom",
            },
            tooltip: {
                y: {
                    formatter: function (val) {
                        return val
                    }
                },
                theme: tooltipTheme,
            }
        };

        ReceivingbarChart = new ApexCharts(document.querySelector("#receiving-bar-chart"), barChartOptions);
        ReceivingbarChart.render();
    }





    // Antemortem BAR CHART with darkmode
    var tooltipFormat = 'Heads';

    function updateTooltip(format) {
        tooltipFormat = format;
    }

    let barChart;
    if (currentMode === 'dark') {
        document.body.classList.add('dark');
        switchMode.checked = true;
        renderBarChart(labelColorLight, 'dark');
    } else {
        document.body.classList.remove('dark');
        switchMode.checked = false;
        renderBarChart(labelColorDark, 'light');
    }

    switchMode.addEventListener('change', function () {
        if (barChart) {
            barChart.destroy();
        }

        if (this.checked) {
            document.body.classList.add('dark');
            localStorage.setItem('mode', 'dark'); // Save mode to localStorage
            renderBarChart(labelColorLight, 'dark');
        } else {
            document.body.classList.remove('dark');
            localStorage.setItem('mode', 'light'); // Save mode to localStorage
            renderBarChart(labelColorDark, 'light');
        }
    });
    function renderBarChart(labelColor, tooltipTheme) {
        let barChartOptions = {
            series: [
                {
                    name: 'Suspect/Hold',
                    data: [@string.Join(",", Model.Suspect)]
                },
                {
                    name: 'Condemned',
                    data: [@string.Join(",", Model.Condemned)]
                },
                {

                    name: 'Passed for Slaughter',
                    data: [@string.Join(",", Model.Pass)]
                }
            ],
            chart: {
                type: 'bar',
                height: 450,
                toolbar: {
                    show: true,
                    offsetX: 0,
                    offsetY: -30,
                    tools: {
                        download: true,
                        selection: true,
                        zoom: true,
                        zoomin: true,
                        zoomout: true,
                        pan: true,
                        reset: true | '<img src="/static/icons/reset.png" width="20">',
                        customIcons: []
                    },
                    export: {
                        csv: {
                            filename: 'Antemortem Analytics',
                            columnDelimiter: ',',
                            headerCategory: 'Date',
                            headerValue: 'value',
                            dateFormatter(timestamp) {
                                return new Date(timestamp).toDateString()
                            }
                        },
                        svg: {
                            filename: 'Antemortem Analytics',
                        },
                        png: {
                            filename: 'Antemortem Analytics',
                        }
                    },
                    autoSelected: 'zoom'
                },
            },
            colors: [
                '#2962ff',
                '#d50000',
                '#2e7d32',
            ],
            plotOptions: {
                bar: {
                    horizontal: false,
                    columnWidth: '55%',
                    endingShape: 'rounded',
                },
            },
            dataLabels: {
                enabled: false
            },
            stroke: {
                show: true,
                width: 2,
                colors: ['transparent']
            },
            xaxis: {
                categories: @Html.Raw(Json.Serialize(Model.dayMonthYearAbbreviationsArray)),
                labels: {
                    style: {
                        colors: labelColor,
                    },
                },
            },
            yaxis: {
                title: {
                    text: 'Quantity',
                    style: {
                        color: labelColor,
                    },
                },
                labels: {
                    style: {
                        colors: labelColor,
                    },
                },
            },
            fill: {
                opacity: 1
            },
            grid: {
                borderColor: "#55596e",
                yaxis: {
                    lines: {
                        show: true,
                    },
                },
                xaxis: {
                    lines: {
                        show: true,
                    },
                },
            },
            legend: {
                labels: {
                    colors: labelColor,
                },
                show: true,
                position: "bottom",
            },
            tooltip: {
                y: {
                    formatter: function (val) {
                        return val + ' ' + tooltipFormat;
                    }
                },
                theme: tooltipTheme,
            },
        };

        barChart = new ApexCharts(document.querySelector("#antemortem-bar-chart"), barChartOptions);
        barChart.render();
    }



    //Postmortem Chart


    var options = {
        series: [@string.Join(",", Model.animalTypeRange)],
        chart: {
            width: '500',
            type: 'pie',
            toolbar: {
                show: true,
                offsetX: 0,
                offsetY: -30,
                tools: {
                    download: true,
                    selection: true,
                    zoom: true,
                    zoomin: true,
                    zoomout: true,
                    pan: true,
                    reset: true | '<img src="/static/icons/reset.png" width="20">',
                    customIcons: []
                },
                export: {
                    csv: {
                        filename: 'Postmortem Analytics',
                        columnDelimiter: ',',
                        headerCategory: 'Date',
                        headerValue: 'value',
                        dateFormatter(timestamp) {
                            return new Date(timestamp).toDateString()
                        }
                    },
                    svg: {
                        filename: 'Postmortem Analytics',
                    },
                    png: {
                        filename: 'Postmortem Analytics',
                    }
                },
                autoSelected: 'zoom'
            },
        },
        labels: ['Carcass', 'Lungs', 'Liver', 'Heart', 'Intestines', 'Trimmings', 'Feet', 'Kidneys', 'Spleen'],
        colors: ['#D21F3C', '#d45087', '#f95d6a', '#ff7c43', '#ffa600', '#003f5c', '#2f4b7c', '#665191', '#a05195'],

        legend: {
            position: 'right',
            labels: {
                colors: ['dark'] // Change this to the color you want
            }
        },
        responsive: [{
            breakpoint: 480,
            options: {
                chart: {
                    width: 350
                },
                legend: {
                    position: 'bottom',
                    show: true // This line hides the legend
                },
                borderWidth: 4,
                borderRadius: 2,
                hoverBorderWidth: 0,
                plugins: {
                    legend: {
                        display: false,
                    },
                },
            }
        }],
        tooltip: {
            y: {
                formatter: function (value) {
                    return `${value} Kilograms`;
                }
            }
        },

    };

    var chart = new ApexCharts(document.querySelector("#postmortem-chart"), options);
    chart.render();






    // Fit For Human Consumption
    var fitchartoptions = {
        series: [{
            name: 'Cattle',
            data: [@string.Join(",", Model.Cattle)]
        }, {
            name: 'Carabao',
            data: [@string.Join(",", Model.Carabao)]
        }, {
            name: 'Swine',
            data: [@string.Join(",", Model.Swine)]
        }, {
            name: 'Goat',
            data: [@string.Join(",", Model.Goat)]
        }, {
            name: 'Chicken',
            data: [@string.Join(",", Model.Chicken)]
        }, {
            name: 'Duck',
            data: [@string.Join(",", Model.Duck)]
        }, {
            name: 'Hog',
            data: [@string.Join(",", Model.Hog)]
        }, {
            name: 'Sheep',
            data: [@string.Join(",", Model.Sheep)]
        }],



        chart: {
            type: 'bar',
            height: 350,
            stacked: true,
            stackType: '100%',
            toolbar: {
                show: true,
                offsetX: 0,
                offsetY: -30,
                tools: {
                    download: true,
                    selection: true,
                    zoom: true,
                    zoomin: true,
                    zoomout: true,
                    pan: true,
                    reset: true | '<img src="/static/icons/reset.png" width="20">',
                    customIcons: []
                },
                export: {
                    csv: {
                        filename: 'Receiving Analytics',
                        columnDelimiter: ',',
                        headerCategory: 'Date',
                        headerValue: 'value',
                        dateFormatter(timestamp) {
                            return new Date(timestamp).toDateString()
                        }
                    },
                    svg: {
                        filename: 'Receiving Analytics',
                    },
                    png: {
                        filename: 'Receiving Analytics',
                    }
                },
                autoSelected: 'zoom'
            },
        },
        plotOptions: {
            bar: {
                horizontal: true,
            },
        },
        stroke: {
            width: 1,
            colors: ['#fff']
        },

        xaxis: {
            categories: @Html.Raw(Json.Serialize(Model.dayMonthYearAbbreviationsArray)),
        },
        tooltip: {
            y: {
                formatter: function (val) {
                    return val + "Kilograms"
                },
            },
        },
        fill: {
            opacity: 1

        },
        legend: {
            color: 'dark',
            position: 'top',
            horizontalAlign: 'center',
            offsetX: 40,
            itemMargin: {
                horizontal: 7,
            },
            labels: {
                colors: ['dark'] // Change this to the color you want
            }
        }
    };

    var fitchart = new ApexCharts(document.querySelector("#fit-chart"), fitchartoptions);
    fitchart.render();

</script>
































@*@using (Html.BeginForm("Index", "Analytics", FormMethod.Post))
{
    <div>
        @Html.LabelFor(m => m.SelectedSpecies)
        @Html.DropDownListFor(m => m.SelectedSpecies, Model.SpeciesList)
    </div>

    <div>
        @Html.LabelFor(m => m.SelectedTimeSeries)
        @Html.DropDownListFor(m => m.SelectedTimeSeries, Model.TimeSeriesList, "--Select a Time--")
    </div>

    <button type="submit">Submit</button>
}*@

@*@if (Model.DressedWeight != null && Model.DressedWeight.Any())
{
    <ul>
        @foreach (var dataPoint in Model.DressedWeight)
        {
            <li>@dataPoint</li>
        }
        @foreach (var dataPoint in Model.Dates)
        {
            <li>@dataPoint</li>
        }
    </ul>
}
else
{
    <p>No analytics data available.</p>
}*@