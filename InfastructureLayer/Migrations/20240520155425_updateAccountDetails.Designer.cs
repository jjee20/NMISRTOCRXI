// <auto-generated />
using System;
using InfastructureLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InfastructureLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240520155425_updateAccountDetails")]
    partial class updateAccountDetails
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DomainLayer.Models.AccountDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("MeatEstablishmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("MeatEstablishmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e70e8fde-d12b-49bf-b44c-6ba18caaee0e",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2279dbcf-cb2a-440c-9aeb-ca3dc0656782",
                            Email = "super@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("94c2c274-2a0b-4f24-a84d-6cf7ee8cb9d9"),
                            NormalizedEmail = "SUPER@ADMIN.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGHBfdkWi/tMrM0kijF/CTjpMYfL1y/iA6zH+j5bv+L1NwGlK7BhLAW52zXt6IgGyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "superadmin"
                        },
                        new
                        {
                            Id = "7180b314-e623-4d53-8960-6e367d1bd49b",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "27494fda-6a3e-4e5c-87ec-066a430cd75e",
                            Email = "mtv@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("5f2e8b7c-0d0a-4022-ba4e-792297574b3f"),
                            NormalizedEmail = "INSPECTOR@ADMIN.COM",
                            NormalizedUserName = "INSPECTORADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEG0m4l1d8wGtdKEq8UTDPbGOG1Z0cmZfvCbCzkt3pE6FfhsKZ73X9XNh98M6gPzoaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "inspectoradmin"
                        },
                        new
                        {
                            Id = "4e5cbff5-8073-4a6e-be62-6440a5d87c80",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "76c12de5-e3e0-4d88-8b3b-f7c3691d1bab",
                            Email = "mtv@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("95aecde7-ab6e-45b9-937c-d85290af8683"),
                            NormalizedEmail = "MTV@ADMIN.COM",
                            NormalizedUserName = "MTVRADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDFUvbwa/KAv4osnRLT8BQta8ThFN8bgoSiFtZeLurKqPnKNV/EZV1GhD474QBt/8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mtvadmin"
                        },
                        new
                        {
                            Id = "92d593de-6455-4225-aeef-c1dd433938d0",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "6a72b78f-c07f-4427-89d1-74e503f175dc",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("d64f2090-bff6-4bea-a4b6-f0245395785c"),
                            NormalizedEmail = "USER@USER.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEF2rdKpj19YZJsT6Ryv6OYwh+7WQeFpI42cP8wn/dEJxnfCHPc1E4Dm1ywVqB5lq7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        },
                        new
                        {
                            Id = "25aa9ace-3318-467d-b212-d5403c253451",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "663e2ad9-837d-4807-9ba3-72611ea34138",
                            Email = "meat@rep.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("94c2c274-2a0b-4f24-a84d-6cf7ee8cb9d9"),
                            NormalizedEmail = "MEAT@REP.COM",
                            NormalizedUserName = "MEATREP",
                            PasswordHash = "AQAAAAIAAYagAAAAEIDO908dvTE+CmitQypZ+2kCfDgYff998vzHw7YYJpDi9ZUfmdzEdcHY0FuOiyqx1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "meatrep"
                        },
                        new
                        {
                            Id = "04fe76dc-d9ea-4883-87ef-a53504d0dd06",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ae35533f-f03d-41a6-8fcf-b198f8b6ef9b",
                            Email = "meat@inspector.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("5f2e8b7c-0d0a-4022-ba4e-792297574b3f"),
                            NormalizedEmail = "MEAT@INSPECTOR.COM",
                            NormalizedUserName = "MEATINSPECTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEDt287u2uI5mItu4nMru9VN7cEaGwD7glh8v5XlYCsCgK+ToVbp8qRjiMSYToSdocw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "meatinspector"
                        },
                        new
                        {
                            Id = "aec7f9fc-995b-491d-8829-03e2ae050c96",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "60a0b370-870f-4650-b9c5-317b92cf7588",
                            Email = "mtv@inspector.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("95aecde7-ab6e-45b9-937c-d85290af8683"),
                            NormalizedEmail = "MTV@INSPECTOR.COM",
                            NormalizedUserName = "MTVINSPECTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAECzeWQ3r7WfOBCrW2SU6WCftxuvZe7PKZq10OFrpB6In0cYjUJgJBE2BOBqBI1FJsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mtvinspector"
                        },
                        new
                        {
                            Id = "d5b60b83-40ca-48db-85d8-7f6ebbd51a1f",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "67d7b1f7-8901-4988-9668-1e43cdf8543d",
                            Email = "mtv@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("d64f2090-bff6-4bea-a4b6-f0245395785c"),
                            NormalizedEmail = "MTV@USER.COM",
                            NormalizedUserName = "MTVUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEPDt0oRosfoHbiNOYckL7rLbYX/9PW0cQGiwiiJ83QNedHAU2l0CFnswHlsdJilRCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mtvuser"
                        });
                });

            modelBuilder.Entity("DomainLayer.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Barangay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DomainLayer.Models.Antemortem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cause")
                        .HasColumnType("int");

                    b.Property<int>("Issue")
                        .HasColumnType("int");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<string>("Other")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceivingReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ReceivingReportId");

                    b.ToTable("Antemortems");
                });

            modelBuilder.Entity("DomainLayer.Models.CheckList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("estserved")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inspectdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inspectorname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inspecttime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("operatorname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("plateno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CheckLists");
                });

            modelBuilder.Entity("DomainLayer.Models.DisapprovedApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MTVInspectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MTVInspectionId");

                    b.ToTable("DisapprovedApplications");
                });

            modelBuilder.Entity("DomainLayer.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverFname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverLname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverMname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LicenseBack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseFront")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("birthdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("DomainLayer.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Dissatisfied")
                        .HasColumnType("int");

                    b.Property<int>("HighlyDissatisfied")
                        .HasColumnType("int");

                    b.Property<int>("HighlySatisfied")
                        .HasColumnType("int");

                    b.Property<int>("Neutral")
                        .HasColumnType("int");

                    b.Property<int>("Satisfied")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("DomainLayer.Models.Helper", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelperFname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelperLname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelperMname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("birthdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Helpers");
                });

            modelBuilder.Entity("DomainLayer.Models.LogTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogPurpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogTransactions");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccreditionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HelperId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerFname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerLname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerMname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("applicationtype")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("HelperId");

                    b.HasIndex("VehicleId");

                    b.ToTable("MTVApplications");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplicationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MTVInspectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Processed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Received")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MTVInspectionId");

                    b.ToTable("MTVApplicationResults");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ControlNo")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FaxNumber")
                        .HasColumnType("int");

                    b.Property<string>("LTOCR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LTOOR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlateNo")
                        .HasColumnType("int");

                    b.Property<string>("RegisteredOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleMaker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MTVDetails");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectlyInstalled")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Enclosed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Insulated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MTVApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("PlasticCurtains")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TempControlled")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MTVApplicationId");

                    b.ToTable("MTVInspection");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVquiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MTVApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("passorfail")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MTVApplicationId");

                    b.ToTable("MTVquizzes");
                });

            modelBuilder.Entity("DomainLayer.Models.MeatDealers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MeatEstablishmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeatEstablishmentId");

                    b.ToTable("MeatDealers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a324e6d1-6a37-4857-a2f8-1147fd5c5a02"),
                            FirstName = "Meat",
                            LastName = "Dealer 1",
                            MeatEstablishmentId = new Guid("94c2c274-2a0b-4f24-a84d-6cf7ee8cb9d9")
                        },
                        new
                        {
                            Id = new Guid("57722378-cbc1-467f-b45b-c66fe72dcb7c"),
                            FirstName = "Meat",
                            LastName = "Dealer 2",
                            MeatEstablishmentId = new Guid("5f2e8b7c-0d0a-4022-ba4e-792297574b3f")
                        },
                        new
                        {
                            Id = new Guid("c7e2469d-25a9-4dc3-8131-a3c8ff41e963"),
                            FirstName = "Meat",
                            LastName = "Dealer 3",
                            MeatEstablishmentId = new Guid("95aecde7-ab6e-45b9-937c-d85290af8683")
                        },
                        new
                        {
                            Id = new Guid("a3dd942f-f9b8-4454-8801-2bf3af3c146d"),
                            FirstName = "Meat",
                            LastName = "Dealer 4",
                            MeatEstablishmentId = new Guid("d64f2090-bff6-4bea-a4b6-f0245395785c")
                        });
                });

            modelBuilder.Entity("DomainLayer.Models.MeatEstablishment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<int?>("LicenseStatus")
                        .HasColumnType("int");

                    b.Property<string>("LicenseToOperateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MeatEstablishment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94c2c274-2a0b-4f24-a84d-6cf7ee8cb9d9"),
                            Lat = 0.0,
                            LicenseStatus = 0,
                            LicenseToOperateNumber = "28693801-33a0-4339-996a-3c8964ceb394",
                            Long = 0.0,
                            Name = "Meat Establishment 1",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("5f2e8b7c-0d0a-4022-ba4e-792297574b3f"),
                            Lat = 0.0,
                            LicenseStatus = 0,
                            LicenseToOperateNumber = "e62ebd09-b8ca-4aa0-abfe-aeae67b90256",
                            Long = 0.0,
                            Name = "Meat Establishment 2",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("95aecde7-ab6e-45b9-937c-d85290af8683"),
                            Lat = 0.0,
                            LicenseStatus = 1,
                            LicenseToOperateNumber = "b63e2a32-7dbd-4bec-8700-d0bfd5507097",
                            Long = 0.0,
                            Name = "Meat Establishment 3",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("d64f2090-bff6-4bea-a4b6-f0245395785c"),
                            Lat = 0.0,
                            LicenseStatus = 0,
                            LicenseToOperateNumber = "6c86575e-a38f-4305-befd-9028f39c05ca",
                            Long = 0.0,
                            Name = "Meat Establishment 4",
                            Type = 1
                        });
                });

            modelBuilder.Entity("DomainLayer.Models.MeatInspectionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ReceivingReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RepDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsId");

                    b.HasIndex("ReceivingReportId")
                        .IsUnique()
                        .HasFilter("[ReceivingReportId] IS NOT NULL");

                    b.ToTable("MeatInspectionReports");
                });

            modelBuilder.Entity("DomainLayer.Models.PassedForSlaughter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceivingReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ReceivingReportId")
                        .IsUnique();

                    b.ToTable("PassedForSlaughters");
                });

            modelBuilder.Entity("DomainLayer.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MTVApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentReceipt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SOA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MTVApplicationId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DomainLayer.Models.PostArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conclusion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("References")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PostArticles");
                });

            modelBuilder.Entity("DomainLayer.Models.Postmortem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalPart")
                        .HasColumnType("int");

                    b.Property<int>("Cause")
                        .HasColumnType("int");

                    b.Property<string>("Image1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceivingReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ReceivingReportId");

                    b.ToTable("Postmortems");
                });

            modelBuilder.Entity("DomainLayer.Models.QrCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QrCodes");
                });

            modelBuilder.Entity("DomainLayer.Models.Receiving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountDetailsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RecDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsId");

                    b.ToTable("Receivings");
                });

            modelBuilder.Entity("DomainLayer.Models.ReceivingReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BatchCode")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("HoldingPenNo")
                        .HasColumnType("int");

                    b.Property<int?>("InspectionStatus")
                        .HasColumnType("int");

                    b.Property<double>("LiveWeight")
                        .HasColumnType("float");

                    b.Property<Guid?>("MeatDealersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceivingBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingDoc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Species")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsId");

                    b.HasIndex("MeatDealersId");

                    b.ToTable("ReceivingReports");
                });

            modelBuilder.Entity("DomainLayer.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalPart")
                        .HasColumnType("int");

                    b.Property<int>("Cause")
                        .HasColumnType("int");

                    b.Property<int>("CertificateStatus")
                        .HasColumnType("int");

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DressedWeight")
                        .HasColumnType("int");

                    b.Property<int>("FitforConNoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("FitforConSpecies")
                        .HasColumnType("int");

                    b.Property<int>("Issue")
                        .HasColumnType("int");

                    b.Property<int?>("LiveWeight")
                        .HasColumnType("int");

                    b.Property<string>("MeatDealer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("NoOfHeadsPassed")
                        .HasColumnType("int");

                    b.Property<int>("PostmortemCause")
                        .HasColumnType("int");

                    b.Property<int>("PostmortemNoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("PostmortemWeight")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Species")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<double>("WeightPassed")
                        .HasColumnType("float");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("DomainLayer.Models.SummaryAndDistributionOfMIC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MICCancelled")
                        .HasColumnType("int");

                    b.Property<int>("MICIssued")
                        .HasColumnType("int");

                    b.Property<int>("TotalNoFitForHumanConsumptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TotalNoFitForHumanConsumptionId");

                    b.ToTable("SummaryAndDistributionOfMICs");
                });

            modelBuilder.Entity("DomainLayer.Models.TotalNoFitForHumanConsumptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("DressedWeight")
                        .HasColumnType("float");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceivingReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Species")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceivingReportId")
                        .IsUnique();

                    b.ToTable("TotalNoFitForHumanConsumptions");
                });

            modelBuilder.Entity("DomainLayer.Models.VehicleInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Est")
                        .HasColumnType("int");

                    b.Property<string>("LTOCR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LTOOR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleMaker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleInfos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "09c7723d-da4f-431e-bd1d-76679d917724",
                            Name = "SuperAdministrator",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "3efb5f25-75f7-48bd-b4e3-f9eb98b214ff",
                            Name = "InspectorAdministrator",
                            NormalizedName = "INSPECTORADMIN"
                        },
                        new
                        {
                            Id = "2f59a6f7-108a-46f4-82b0-3eca17436684",
                            Name = "MTVAdministrator",
                            NormalizedName = "MTVADMIN"
                        },
                        new
                        {
                            Id = "8ab596d6-fd91-4ad9-9b9b-77e406046a73",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "ee12030b-211f-4597-9f59-ba5bf3b8c9c8",
                            Name = "MeatEstablishmentRepresentative",
                            NormalizedName = "MEATESTABLISHMENTREPRESENTATIVE"
                        },
                        new
                        {
                            Id = "0826d88e-b994-46a4-9d44-64378a3d2f5c",
                            Name = "MeatInspector",
                            NormalizedName = "MEATINSPECTOR"
                        },
                        new
                        {
                            Id = "53e57515-7b1f-4db8-8224-a1fd36836231",
                            Name = "MtvInspector",
                            NormalizedName = "MTVINSPECTOR"
                        },
                        new
                        {
                            Id = "d9c89315-a0d7-4002-9756-b8a8f1ddad03",
                            Name = "MtvUsers",
                            NormalizedName = "MTVUSERS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e70e8fde-d12b-49bf-b44c-6ba18caaee0e",
                            RoleId = "09c7723d-da4f-431e-bd1d-76679d917724"
                        },
                        new
                        {
                            UserId = "7180b314-e623-4d53-8960-6e367d1bd49b",
                            RoleId = "3efb5f25-75f7-48bd-b4e3-f9eb98b214ff"
                        },
                        new
                        {
                            UserId = "4e5cbff5-8073-4a6e-be62-6440a5d87c80",
                            RoleId = "2f59a6f7-108a-46f4-82b0-3eca17436684"
                        },
                        new
                        {
                            UserId = "92d593de-6455-4225-aeef-c1dd433938d0",
                            RoleId = "8ab596d6-fd91-4ad9-9b9b-77e406046a73"
                        },
                        new
                        {
                            UserId = "25aa9ace-3318-467d-b212-d5403c253451",
                            RoleId = "ee12030b-211f-4597-9f59-ba5bf3b8c9c8"
                        },
                        new
                        {
                            UserId = "04fe76dc-d9ea-4883-87ef-a53504d0dd06",
                            RoleId = "0826d88e-b994-46a4-9d44-64378a3d2f5c"
                        },
                        new
                        {
                            UserId = "aec7f9fc-995b-491d-8829-03e2ae050c96",
                            RoleId = "53e57515-7b1f-4db8-8224-a1fd36836231"
                        },
                        new
                        {
                            UserId = "d5b60b83-40ca-48db-85d8-7f6ebbd51a1f",
                            RoleId = "d9c89315-a0d7-4002-9756-b8a8f1ddad03"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Models.AccountDetails", b =>
                {
                    b.HasOne("DomainLayer.Models.MeatEstablishment", "MeatEstablishment")
                        .WithMany()
                        .HasForeignKey("MeatEstablishmentId");

                    b.Navigation("MeatEstablishment");
                });

            modelBuilder.Entity("DomainLayer.Models.Antemortem", b =>
                {
                    b.HasOne("DomainLayer.Models.ReceivingReport", "ReceivingReport")
                        .WithMany("Antemortems")
                        .HasForeignKey("ReceivingReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceivingReport");
                });

            modelBuilder.Entity("DomainLayer.Models.DisapprovedApplication", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVInspection", "MTVInspection")
                        .WithMany()
                        .HasForeignKey("MTVInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVInspection");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplication", b =>
                {
                    b.HasOne("DomainLayer.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("DomainLayer.Models.Helper", "Helper")
                        .WithMany()
                        .HasForeignKey("HelperId");

                    b.HasOne("DomainLayer.Models.VehicleInfo", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.Navigation("Driver");

                    b.Navigation("Helper");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplicationResult", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVInspection", "MTVInspection")
                        .WithMany()
                        .HasForeignKey("MTVInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVInspection");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVInspection", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVApplication", "MTVApplication")
                        .WithMany()
                        .HasForeignKey("MTVApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVApplication");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVquiz", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVApplication", "MTVApplication")
                        .WithMany()
                        .HasForeignKey("MTVApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVApplication");
                });

            modelBuilder.Entity("DomainLayer.Models.MeatDealers", b =>
                {
                    b.HasOne("DomainLayer.Models.MeatEstablishment", "MeatEstablishment")
                        .WithMany()
                        .HasForeignKey("MeatEstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeatEstablishment");
                });

            modelBuilder.Entity("DomainLayer.Models.MeatInspectionReport", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", "AccountDetails")
                        .WithMany()
                        .HasForeignKey("AccountDetailsId");

                    b.HasOne("DomainLayer.Models.ReceivingReport", "ReceivingReport")
                        .WithOne("MeatInspectionReport")
                        .HasForeignKey("DomainLayer.Models.MeatInspectionReport", "ReceivingReportId");

                    b.Navigation("AccountDetails");

                    b.Navigation("ReceivingReport");
                });

            modelBuilder.Entity("DomainLayer.Models.PassedForSlaughter", b =>
                {
                    b.HasOne("DomainLayer.Models.ReceivingReport", "ReceivingReport")
                        .WithOne("PassedForSlaughter")
                        .HasForeignKey("DomainLayer.Models.PassedForSlaughter", "ReceivingReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceivingReport");
                });

            modelBuilder.Entity("DomainLayer.Models.Payment", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVApplication", "MTVApplication")
                        .WithMany()
                        .HasForeignKey("MTVApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVApplication");
                });

            modelBuilder.Entity("DomainLayer.Models.Postmortem", b =>
                {
                    b.HasOne("DomainLayer.Models.ReceivingReport", "ReceivingReport")
                        .WithMany("Postmortems")
                        .HasForeignKey("ReceivingReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceivingReport");
                });

            modelBuilder.Entity("DomainLayer.Models.Receiving", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", "AccountDetails")
                        .WithMany()
                        .HasForeignKey("AccountDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountDetails");
                });

            modelBuilder.Entity("DomainLayer.Models.ReceivingReport", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", "AccountDetails")
                        .WithMany()
                        .HasForeignKey("AccountDetailsId");

                    b.HasOne("DomainLayer.Models.MeatDealers", "MeatDealers")
                        .WithMany()
                        .HasForeignKey("MeatDealersId");

                    b.Navigation("AccountDetails");

                    b.Navigation("MeatDealers");
                });

            modelBuilder.Entity("DomainLayer.Models.SummaryAndDistributionOfMIC", b =>
                {
                    b.HasOne("DomainLayer.Models.TotalNoFitForHumanConsumptions", "TotalNoFitForHumanConsumption")
                        .WithMany()
                        .HasForeignKey("TotalNoFitForHumanConsumptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TotalNoFitForHumanConsumption");
                });

            modelBuilder.Entity("DomainLayer.Models.TotalNoFitForHumanConsumptions", b =>
                {
                    b.HasOne("DomainLayer.Models.ReceivingReport", "ReceivingReport")
                        .WithOne("TotalNoFitForHumanConsumption")
                        .HasForeignKey("DomainLayer.Models.TotalNoFitForHumanConsumptions", "ReceivingReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceivingReport");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainLayer.Models.ReceivingReport", b =>
                {
                    b.Navigation("Antemortems");

                    b.Navigation("MeatInspectionReport");

                    b.Navigation("PassedForSlaughter");

                    b.Navigation("Postmortems");

                    b.Navigation("TotalNoFitForHumanConsumption");
                });
#pragma warning restore 612, 618
        }
    }
}
