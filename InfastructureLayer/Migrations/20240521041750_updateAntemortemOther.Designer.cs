// <auto-generated />
using System;
using InfastructureLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InfastructureLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240521041750_updateAntemortemOther")]
    partial class updateAntemortemOther
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DomainLayer.Models.AccountDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("MeatEstablishmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("MeatEstablishmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ed2bad61-6183-496c-8ec5-f254fac9725a",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "d00b3776-2994-47dd-b255-080c7be25636",
                            Email = "super@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("95a1e0b1-0f80-41bb-88fc-eaf79a28cf60"),
                            NormalizedEmail = "SUPER@ADMIN.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFbDJ25AYtvf5F6WoPfUPaE123vEgLO0EBXggd/atxSkAJ4W/vq2rfJv/bkKuWx46A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "superadmin"
                        },
                        new
                        {
                            Id = "37da0a58-0bdf-4546-840b-304838a53b17",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "0d2cec69-cc21-4644-8fb5-2afd349efc83",
                            Email = "mtv@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("930f4f62-66d4-4a4a-b46b-5cea152cce32"),
                            NormalizedEmail = "INSPECTOR@ADMIN.COM",
                            NormalizedUserName = "INSPECTORADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOUJM93YtH2k2Y73/50MkZK6oVebRQBN5sTx/20qm3B1EAdkS+XiiOFoEht+BDCciA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "inspectoradmin"
                        },
                        new
                        {
                            Id = "a2653695-f1cc-4c4e-938c-d90901ee98a9",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c010eb4d-04aa-421b-a9f4-8e8fdd8d3402",
                            Email = "mtv@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("033a4a31-bb86-48cd-a6d9-8f9174233bc6"),
                            NormalizedEmail = "MTV@ADMIN.COM",
                            NormalizedUserName = "MTVRADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBjt0FUBXa39gpr85WrRnvbK8QaLwyiUswaNSqoCkT5fnRanVNC0W6vIZv63c4QUTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mtvadmin"
                        },
                        new
                        {
                            Id = "0090321a-ae68-41bd-85cb-92c83567ad6e",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "477a12bc-e372-4476-a2de-57794c0dca82",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("31f15472-b8d7-49ca-bf73-d094f8330de6"),
                            NormalizedEmail = "USER@USER.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEA+J2U4/fF6gqWt0aDW6mTpHXFTCdmcUedao0M41lCMu7IBFcSQJsbTogIXrNri78g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        },
                        new
                        {
                            Id = "d4ceffb6-651b-49a7-8746-2cee42ba88c7",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "53a1a5f3-e198-4d61-bfcf-c1cc9e2d1504",
                            Email = "meat@rep.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("95a1e0b1-0f80-41bb-88fc-eaf79a28cf60"),
                            NormalizedEmail = "MEAT@REP.COM",
                            NormalizedUserName = "MEATREP",
                            PasswordHash = "AQAAAAIAAYagAAAAEGfnuRjEicCcMKZNqAgqw05w4+gfIIDQUlqV5Oj0COohbB8CCkCkhckar05kVtXORA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "meatrep"
                        },
                        new
                        {
                            Id = "8c29a6d6-ab94-4b75-86fa-f4229e5fcbf6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4792c78c-f5b5-4975-a0c1-78e9db09631c",
                            Email = "meat@inspector.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("930f4f62-66d4-4a4a-b46b-5cea152cce32"),
                            NormalizedEmail = "MEAT@INSPECTOR.COM",
                            NormalizedUserName = "MEATINSPECTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEOr3r4Cea90SXQMAU8OU+ktNiLkiqnmbUOLcTwm1GQL+/S8GnsRfRWPm7rqg6Y1qgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "meatinspector"
                        },
                        new
                        {
                            Id = "3ac1857a-48c2-4c75-a3a7-277fbadcd38a",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "da354749-b032-4eb1-b342-ddbfab3f99ba",
                            Email = "mtv@inspector.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("033a4a31-bb86-48cd-a6d9-8f9174233bc6"),
                            NormalizedEmail = "MTV@INSPECTOR.COM",
                            NormalizedUserName = "MTVINSPECTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEFTvnTpx96Vm7F/Kz2hVq+z4DmRsH09G8jpyLWzr45oAh+PTcBO5ZZ4xfhoEbMiyQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mtvinspector"
                        },
                        new
                        {
                            Id = "c044b281-b508-4a58-b6df-a07ae46a6164",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b2a383da-3d5f-45cf-8fef-16d57a6e1bab",
                            Email = "mtv@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("31f15472-b8d7-49ca-bf73-d094f8330de6"),
                            NormalizedEmail = "MTV@USER.COM",
                            NormalizedUserName = "MTVUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEPuCbon62CkESalxiufBgQr6J+dfPxohrTYLgmwECixQL4q/FZOq812WrLjloBsaBg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mtvuser"
                        });
                });

            modelBuilder.Entity("DomainLayer.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Barangay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DomainLayer.Models.Antemortem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cause")
                        .HasColumnType("int");

                    b.Property<int>("Issue")
                        .HasColumnType("int");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceivingReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ReceivingReportId");

                    b.ToTable("Antemortems");
                });

            modelBuilder.Entity("DomainLayer.Models.CheckList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("estserved")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inspectdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inspectorname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inspecttime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("operatorname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("plateno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CheckLists");
                });

            modelBuilder.Entity("DomainLayer.Models.DisapprovedApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MTVInspectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MTVInspectionId");

                    b.ToTable("DisapprovedApplications");
                });

            modelBuilder.Entity("DomainLayer.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverFname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverLname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverMname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LicenseBack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseFront")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("birthdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("DomainLayer.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Dissatisfied")
                        .HasColumnType("int");

                    b.Property<int>("HighlyDissatisfied")
                        .HasColumnType("int");

                    b.Property<int>("HighlySatisfied")
                        .HasColumnType("int");

                    b.Property<int>("Neutral")
                        .HasColumnType("int");

                    b.Property<int>("Satisfied")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("DomainLayer.Models.Helper", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelperFname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelperLname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelperMname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("birthdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Helpers");
                });

            modelBuilder.Entity("DomainLayer.Models.LogTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogPurpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogTransactions");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccreditionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HelperId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerFname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerLname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerMname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("applicationtype")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("HelperId");

                    b.HasIndex("VehicleId");

                    b.ToTable("MTVApplications");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplicationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MTVInspectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Processed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Received")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MTVInspectionId");

                    b.ToTable("MTVApplicationResults");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ControlNo")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FaxNumber")
                        .HasColumnType("int");

                    b.Property<string>("LTOCR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LTOOR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlateNo")
                        .HasColumnType("int");

                    b.Property<string>("RegisteredOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleMaker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MTVDetails");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectlyInstalled")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Enclosed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Insulated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MTVApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("PlasticCurtains")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TempControlled")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MTVApplicationId");

                    b.ToTable("MTVInspection");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVquiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MTVApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("passorfail")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MTVApplicationId");

                    b.ToTable("MTVquizzes");
                });

            modelBuilder.Entity("DomainLayer.Models.MeatDealers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MeatEstablishmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeatEstablishmentId");

                    b.ToTable("MeatDealers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("525f769e-7c08-4130-aae2-109d0bd0182a"),
                            FirstName = "Meat",
                            LastName = "Dealer 1",
                            MeatEstablishmentId = new Guid("95a1e0b1-0f80-41bb-88fc-eaf79a28cf60")
                        },
                        new
                        {
                            Id = new Guid("44b620d4-9523-43cc-96c2-26eea3bee041"),
                            FirstName = "Meat",
                            LastName = "Dealer 2",
                            MeatEstablishmentId = new Guid("930f4f62-66d4-4a4a-b46b-5cea152cce32")
                        },
                        new
                        {
                            Id = new Guid("beae1126-6397-4a37-b224-ecb24aee9754"),
                            FirstName = "Meat",
                            LastName = "Dealer 3",
                            MeatEstablishmentId = new Guid("033a4a31-bb86-48cd-a6d9-8f9174233bc6")
                        },
                        new
                        {
                            Id = new Guid("f9b0b601-2aff-4792-a09a-b7eaeae8cf92"),
                            FirstName = "Meat",
                            LastName = "Dealer 4",
                            MeatEstablishmentId = new Guid("31f15472-b8d7-49ca-bf73-d094f8330de6")
                        });
                });

            modelBuilder.Entity("DomainLayer.Models.MeatEstablishment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<int?>("LicenseStatus")
                        .HasColumnType("int");

                    b.Property<string>("LicenseToOperateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MeatEstablishment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95a1e0b1-0f80-41bb-88fc-eaf79a28cf60"),
                            Lat = 0.0,
                            LicenseStatus = 0,
                            LicenseToOperateNumber = "eed02ae8-ce8f-4574-a8f9-f943f78c7fc9",
                            Long = 0.0,
                            Name = "Meat Establishment 1",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("930f4f62-66d4-4a4a-b46b-5cea152cce32"),
                            Lat = 0.0,
                            LicenseStatus = 0,
                            LicenseToOperateNumber = "1554157c-ffe0-4100-baff-db9183f296ce",
                            Long = 0.0,
                            Name = "Meat Establishment 2",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("033a4a31-bb86-48cd-a6d9-8f9174233bc6"),
                            Lat = 0.0,
                            LicenseStatus = 1,
                            LicenseToOperateNumber = "035c8af2-00e4-48eb-9f76-125960c78822",
                            Long = 0.0,
                            Name = "Meat Establishment 3",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("31f15472-b8d7-49ca-bf73-d094f8330de6"),
                            Lat = 0.0,
                            LicenseStatus = 0,
                            LicenseToOperateNumber = "4b2cc1c5-568d-4b15-80ff-91a02d6c4157",
                            Long = 0.0,
                            Name = "Meat Establishment 4",
                            Type = 1
                        });
                });

            modelBuilder.Entity("DomainLayer.Models.MeatInspectionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ReceivingReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RepDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsId");

                    b.HasIndex("ReceivingReportId")
                        .IsUnique()
                        .HasFilter("[ReceivingReportId] IS NOT NULL");

                    b.ToTable("MeatInspectionReports");
                });

            modelBuilder.Entity("DomainLayer.Models.PassedForSlaughter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceivingReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ReceivingReportId")
                        .IsUnique();

                    b.ToTable("PassedForSlaughters");
                });

            modelBuilder.Entity("DomainLayer.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MTVApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentReceipt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SOA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MTVApplicationId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DomainLayer.Models.PostArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conclusion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("References")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PostArticles");
                });

            modelBuilder.Entity("DomainLayer.Models.Postmortem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalPart")
                        .HasColumnType("int");

                    b.Property<int>("Cause")
                        .HasColumnType("int");

                    b.Property<string>("Image1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceivingReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ReceivingReportId");

                    b.ToTable("Postmortems");
                });

            modelBuilder.Entity("DomainLayer.Models.QrCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QrCodes");
                });

            modelBuilder.Entity("DomainLayer.Models.Receiving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountDetailsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RecDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsId");

                    b.ToTable("Receivings");
                });

            modelBuilder.Entity("DomainLayer.Models.ReceivingReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BatchCode")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("HoldingPenNo")
                        .HasColumnType("int");

                    b.Property<int?>("InspectionStatus")
                        .HasColumnType("int");

                    b.Property<double>("LiveWeight")
                        .HasColumnType("float");

                    b.Property<Guid?>("MeatDealersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceivingBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingDoc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Species")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsId");

                    b.HasIndex("MeatDealersId");

                    b.ToTable("ReceivingReports");
                });

            modelBuilder.Entity("DomainLayer.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalPart")
                        .HasColumnType("int");

                    b.Property<int>("Cause")
                        .HasColumnType("int");

                    b.Property<int>("CertificateStatus")
                        .HasColumnType("int");

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DressedWeight")
                        .HasColumnType("int");

                    b.Property<int>("FitforConNoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("FitforConSpecies")
                        .HasColumnType("int");

                    b.Property<int>("Issue")
                        .HasColumnType("int");

                    b.Property<int?>("LiveWeight")
                        .HasColumnType("int");

                    b.Property<string>("MeatDealer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("NoOfHeadsPassed")
                        .HasColumnType("int");

                    b.Property<int>("PostmortemCause")
                        .HasColumnType("int");

                    b.Property<int>("PostmortemNoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("PostmortemWeight")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Species")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<double>("WeightPassed")
                        .HasColumnType("float");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("DomainLayer.Models.SummaryAndDistributionOfMIC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MICCancelled")
                        .HasColumnType("int");

                    b.Property<int>("MICIssued")
                        .HasColumnType("int");

                    b.Property<int>("TotalNoFitForHumanConsumptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TotalNoFitForHumanConsumptionId");

                    b.ToTable("SummaryAndDistributionOfMICs");
                });

            modelBuilder.Entity("DomainLayer.Models.TotalNoFitForHumanConsumptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("DressedWeight")
                        .HasColumnType("float");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<Guid>("ReceivingReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Species")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceivingReportId")
                        .IsUnique();

                    b.ToTable("TotalNoFitForHumanConsumptions");
                });

            modelBuilder.Entity("DomainLayer.Models.VehicleInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Est")
                        .HasColumnType("int");

                    b.Property<string>("LTOCR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LTOOR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleMaker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleInfos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d8c26bec-37f3-4e9f-8278-8a675b2b46c5",
                            Name = "SuperAdministrator",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "e1c3efa2-4bb5-40f7-b7ac-71b8ed5426c8",
                            Name = "InspectorAdministrator",
                            NormalizedName = "INSPECTORADMIN"
                        },
                        new
                        {
                            Id = "8007a2ce-d6f2-4727-9f4e-35801b6428a5",
                            Name = "MTVAdministrator",
                            NormalizedName = "MTVADMIN"
                        },
                        new
                        {
                            Id = "7b07a17c-4718-4141-aa90-eabef67559bd",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "b43c933c-305e-49c9-b984-4d5ebf3fae0d",
                            Name = "MeatEstablishmentRepresentative",
                            NormalizedName = "MEATESTABLISHMENTREPRESENTATIVE"
                        },
                        new
                        {
                            Id = "0bd82376-227e-41f0-ac76-4ddaae640bb2",
                            Name = "MeatInspector",
                            NormalizedName = "MEATINSPECTOR"
                        },
                        new
                        {
                            Id = "ccd26162-39d0-491f-8e3f-e9b462cb03da",
                            Name = "MtvInspector",
                            NormalizedName = "MTVINSPECTOR"
                        },
                        new
                        {
                            Id = "d7c4d3ea-a364-4f36-a8ac-48250d8636d2",
                            Name = "MtvUsers",
                            NormalizedName = "MTVUSERS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ed2bad61-6183-496c-8ec5-f254fac9725a",
                            RoleId = "d8c26bec-37f3-4e9f-8278-8a675b2b46c5"
                        },
                        new
                        {
                            UserId = "37da0a58-0bdf-4546-840b-304838a53b17",
                            RoleId = "e1c3efa2-4bb5-40f7-b7ac-71b8ed5426c8"
                        },
                        new
                        {
                            UserId = "a2653695-f1cc-4c4e-938c-d90901ee98a9",
                            RoleId = "8007a2ce-d6f2-4727-9f4e-35801b6428a5"
                        },
                        new
                        {
                            UserId = "0090321a-ae68-41bd-85cb-92c83567ad6e",
                            RoleId = "7b07a17c-4718-4141-aa90-eabef67559bd"
                        },
                        new
                        {
                            UserId = "d4ceffb6-651b-49a7-8746-2cee42ba88c7",
                            RoleId = "b43c933c-305e-49c9-b984-4d5ebf3fae0d"
                        },
                        new
                        {
                            UserId = "8c29a6d6-ab94-4b75-86fa-f4229e5fcbf6",
                            RoleId = "0bd82376-227e-41f0-ac76-4ddaae640bb2"
                        },
                        new
                        {
                            UserId = "3ac1857a-48c2-4c75-a3a7-277fbadcd38a",
                            RoleId = "ccd26162-39d0-491f-8e3f-e9b462cb03da"
                        },
                        new
                        {
                            UserId = "c044b281-b508-4a58-b6df-a07ae46a6164",
                            RoleId = "d7c4d3ea-a364-4f36-a8ac-48250d8636d2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Models.AccountDetails", b =>
                {
                    b.HasOne("DomainLayer.Models.MeatEstablishment", "MeatEstablishment")
                        .WithMany()
                        .HasForeignKey("MeatEstablishmentId");

                    b.Navigation("MeatEstablishment");
                });

            modelBuilder.Entity("DomainLayer.Models.Antemortem", b =>
                {
                    b.HasOne("DomainLayer.Models.ReceivingReport", "ReceivingReport")
                        .WithMany("Antemortems")
                        .HasForeignKey("ReceivingReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceivingReport");
                });

            modelBuilder.Entity("DomainLayer.Models.DisapprovedApplication", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVInspection", "MTVInspection")
                        .WithMany()
                        .HasForeignKey("MTVInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVInspection");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplication", b =>
                {
                    b.HasOne("DomainLayer.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("DomainLayer.Models.Helper", "Helper")
                        .WithMany()
                        .HasForeignKey("HelperId");

                    b.HasOne("DomainLayer.Models.VehicleInfo", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.Navigation("Driver");

                    b.Navigation("Helper");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplicationResult", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVInspection", "MTVInspection")
                        .WithMany()
                        .HasForeignKey("MTVInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVInspection");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVInspection", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVApplication", "MTVApplication")
                        .WithMany()
                        .HasForeignKey("MTVApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVApplication");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVquiz", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVApplication", "MTVApplication")
                        .WithMany()
                        .HasForeignKey("MTVApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVApplication");
                });

            modelBuilder.Entity("DomainLayer.Models.MeatDealers", b =>
                {
                    b.HasOne("DomainLayer.Models.MeatEstablishment", "MeatEstablishment")
                        .WithMany()
                        .HasForeignKey("MeatEstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeatEstablishment");
                });

            modelBuilder.Entity("DomainLayer.Models.MeatInspectionReport", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", "AccountDetails")
                        .WithMany()
                        .HasForeignKey("AccountDetailsId");

                    b.HasOne("DomainLayer.Models.ReceivingReport", "ReceivingReport")
                        .WithOne("MeatInspectionReport")
                        .HasForeignKey("DomainLayer.Models.MeatInspectionReport", "ReceivingReportId");

                    b.Navigation("AccountDetails");

                    b.Navigation("ReceivingReport");
                });

            modelBuilder.Entity("DomainLayer.Models.PassedForSlaughter", b =>
                {
                    b.HasOne("DomainLayer.Models.ReceivingReport", "ReceivingReport")
                        .WithOne("PassedForSlaughter")
                        .HasForeignKey("DomainLayer.Models.PassedForSlaughter", "ReceivingReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceivingReport");
                });

            modelBuilder.Entity("DomainLayer.Models.Payment", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVApplication", "MTVApplication")
                        .WithMany()
                        .HasForeignKey("MTVApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVApplication");
                });

            modelBuilder.Entity("DomainLayer.Models.Postmortem", b =>
                {
                    b.HasOne("DomainLayer.Models.ReceivingReport", "ReceivingReport")
                        .WithMany("Postmortems")
                        .HasForeignKey("ReceivingReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceivingReport");
                });

            modelBuilder.Entity("DomainLayer.Models.Receiving", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", "AccountDetails")
                        .WithMany()
                        .HasForeignKey("AccountDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountDetails");
                });

            modelBuilder.Entity("DomainLayer.Models.ReceivingReport", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", "AccountDetails")
                        .WithMany()
                        .HasForeignKey("AccountDetailsId");

                    b.HasOne("DomainLayer.Models.MeatDealers", "MeatDealers")
                        .WithMany()
                        .HasForeignKey("MeatDealersId");

                    b.Navigation("AccountDetails");

                    b.Navigation("MeatDealers");
                });

            modelBuilder.Entity("DomainLayer.Models.SummaryAndDistributionOfMIC", b =>
                {
                    b.HasOne("DomainLayer.Models.TotalNoFitForHumanConsumptions", "TotalNoFitForHumanConsumption")
                        .WithMany()
                        .HasForeignKey("TotalNoFitForHumanConsumptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TotalNoFitForHumanConsumption");
                });

            modelBuilder.Entity("DomainLayer.Models.TotalNoFitForHumanConsumptions", b =>
                {
                    b.HasOne("DomainLayer.Models.ReceivingReport", "ReceivingReport")
                        .WithOne("TotalNoFitForHumanConsumption")
                        .HasForeignKey("DomainLayer.Models.TotalNoFitForHumanConsumptions", "ReceivingReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceivingReport");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainLayer.Models.ReceivingReport", b =>
                {
                    b.Navigation("Antemortems");

                    b.Navigation("MeatInspectionReport");

                    b.Navigation("PassedForSlaughter");

                    b.Navigation("Postmortems");

                    b.Navigation("TotalNoFitForHumanConsumption");
                });
#pragma warning restore 612, 618
        }
    }
}
